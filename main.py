import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from doi_handler import handle_doi
from formatter import format_reply
from utils import extract_doi

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–µ–Ω—å –¥–æ–±—Ä—ã–π! –û—Ç–ø—Ä–∞–≤—å DOI-—Å—Å—ã–ª–∫—É, –∏ —è –Ω–∞–π–¥—É –¥–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    doi = extract_doi(text)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not doi:
        await update.message.reply_text("‚ùå DOI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    if query.data == "publish_request":
        await query.edit_message_reply_markup()  # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        await query.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ.")

    
    metadata = handle_doi(doi)
    reply = format_reply(metadata)

    keyboard = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", url=metadata.get("pdf", "#"))],
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç—Ä—É–¥", callback_data="publish_request")]
    ]
    await update.message.reply_text(reply, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    app.run_polling()
