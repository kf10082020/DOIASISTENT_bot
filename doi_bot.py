import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TOKEN") or "8000984168:AAGRe1CYnGUJ6RRBLCO9qAM3fjbPaXcvSsQ"

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ DOI —Å—Ç–∞—Ç—å–∏, –∏ —è –Ω–∞–π–¥—É –ø–æ –Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

def fetch_metadata(doi):
    headers = {"Accept": "application/vnd.citationstyles.csl+json"}
    url = f"https://doi.org/{doi.strip()}" esponse = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    return None

def build_reply(data):
    title = data.get("title", [""])[0]
    authors = ", ".join([author.get("family", "") for author in data.get("author", [])])
    year = data.get("issued", {}).get("date-parts", [[None]])[0][0]
    journal = data.get("container-title", [""])[0]
    volume = data.get("volume", "")
    issue = data.get("issue", "")
    pages = data.get("page", "")
    url = data.get("URL", "")

    text = f"üìÑ *{title}*
"
    text += f"üë§ –ê–≤—Ç–æ—Ä—ã: {authors}
"
    text += f"üìÖ –ì–æ–¥: {year}
"
    text += f"üìö –ñ—É—Ä–Ω–∞–ª: {journal}
"
    text += f"üì¶ –¢–æ–º: {volume} | –í—ã–ø—É—Å–∫: {issue} | –°—Ç—Ä–∞–Ω–∏—Ü—ã: {pages}
"
    text += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é]({url})
"

    buttons = [
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é", url=url)],
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=url)],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    return text, reply_markup

async def handle_doi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doi = update.message.text.strip().replace("https://doi.org/", "").replace("doi:", "").strip()
    data = fetch_metadata(doi)
    if data:
        reply, keyboard = build_reply(data)
        await update.message.reply_markdown(reply, reply_markup=keyboard, disable_web_page_preview=True)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É DOI.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_doi))
    app.run_polling()

if __name__ == "__main__":
    main()
